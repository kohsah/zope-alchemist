"""

This module gets populated with generic add/edit/view forms for
domain objects.

"""

from zope.event import notify
from zope.lifecycleevent import ObjectCreatedEvent
from zope.formlib import form
from zope.traversing.browser import absoluteURL

from ore.alchemist import Session
from i18n import _
import generic, core

class ContentAddForm( core.DynamicFields, form.AddForm ):
    """
    generic add form for db content
    """

    mode = "add"
    _next_url = None

    def createAndAdd( self, data ):
        # create the object
        ob = generic.createInstance( self.context.domain_model, data )

        # apply extra form values
        form.applyChanges( ob, self.form_fields, data )
        
        # save the object, id is generated by db on flush
        self.context[''] = ob

        # flush so we have database id
        session = Session()
        session.flush()

        # fire an object created event
        notify(ObjectCreatedEvent(ob))
        
        # signal to add form machinery to go to next url
        self._finished_add = True

        return self.context[ ob.id ]
        
    def nextURL( self ):
        if not self._next_url:
            return absoluteURL( self.context, self.request )
        return self._next_url

    def update( self ):
        self.status = self.request.get('portal_status_message','')
        super( AddForm, self).update()

    @form.action(_(u"Save and continue editing"), condition=form.haveInputWidgets, validator='validateUnique')
    def handle_add_edit( self, action, data ):
        ob = self.createAndAdd( data )
        name = self.context.domain_model.__name__
        self._next_url = absoluteURL( ob, self.request ) + "/@@edit?portal_status_message=%s Added"%name

    @form.action(_(u"Save and add another"), condition=form.haveInputWidgets)
    def handle_add_and_another(self, action, data ):
        self.createAndAdd( data )
        name = self.context.domain_model.__name__
        self._next_url = absoluteURL( self.context, self.request ) + '/@@add?portal_status_message=%s Added'%name
        

class ContentDisplayForm( BrowserView ):
    """
    Content Display
    """
    template = ViewPageTemplateFile('templates/content-view.pt')
    form_name = _("View")    
    
    def __call__( self ):
        return self.template()
        
class ContentEditForm( BrowserView ):
    """
    Content Edit View
    """
    template = ViewPageTemplateFile('templates/content-edit.pt')
    form_name = _("Edit")
    
    def __call__( self ):
        return self.template()
