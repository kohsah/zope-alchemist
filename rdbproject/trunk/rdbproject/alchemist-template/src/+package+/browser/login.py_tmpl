import re

from zope import interface, schema, component
from zope.formlib import form

from zope.app.component.hooks import getSite
from zope.publisher.browser import BrowserView
from zope.traversing.browser import absoluteURL

from zope.app.authentication.interfaces import IAuthenticatorPlugin
from zope.app.security.interfaces import IUnauthenticatedPrincipal
from zope.securitypolicy.interfaces import IPrincipalRoleMap

from ore.alchemist import Session

from alchemist.ui.core import BaseForm
from ${package} import domain, interfaces
from ${package}.i18n import _

class ILoginForm( interface.Interface ):
    login = schema.TextLine( title=_(u"Username"))
    password = schema.Password( title=_(u"Password"))    

def check_password( signup ):
    if not signup.password_repeat == signup.password:
        raise schema.ValidationError(_(u"Passwords do not match"))

class ISignupForm( interfaces.IUser ):

    interface.invariant( check_password )    

    password = schema.Password(title=_(u"Password"), min_length=5)
    password_repeat = schema.Password(title=_(u"Repeat password"))


class SignUp( BaseForm ):
    
    form_name = "signup"
    form_fields = form.Fields( ISignupForm )
    
    @form.action( _(u"Sign Up") )
    def handle_signup( self, action, data ):
        principals = component.getUtility( IAuthenticatorPlugin, 'rdb-auth')

        # check if the user already exists
        info = principals.principalInfo( data['login'])
        if info is not None:
            self.status = _("Username already taken")

        # add principal to principal folder        
        # todo - should separate out a non event sending form lib set_data()
        u = domain.User( data['login'] )
        u.first_name = data['first_name']
        u.last_name = data['last_name']
        u.email = data['email']
        u.setPassword( data['password'] )
        s = Session()
        s.save(u)

        prm = IPrincipalRoleMap( self.context )
        prm.assignRoleToPrincipal( u"zope.Member", u.login)
        
        # todo - add registration event notification
        # see zope.authentication.interfaces.IPrincipalCreatedEvent
        msg = _(u"Registration+Successful")
        self.request.response.redirect(u'/@@login?status_message=%s'%(msg) )

class Login( BaseForm ):

    form_fields = form.Fields( ILoginForm )
    prefix = ""
    form_name = _(u"Login")
    
    def update( self ):
        self.status = self.request.get('status_message', '')
        super( Login, self).update()
        
    @form.action( _(u"Login") )
    def handle_login( self, action, data ):
        if IUnauthenticatedPrincipal.providedBy(self.request.principal):
            self.status=_(u"Invalid Account Credentials")
        else:
            site_url = absoluteURL(getSite(), self.request)
            camefrom = self.request.get('camefrom', site_url+'/workspace')
            self.status = _("You are now logged in")
            self.request.response.redirect( camefrom )
            
class Logout( BrowserView ):

    def __call__( self ):
        self.request.response.expireCookie( "wc.cookiecredentials" )
        site_url = absoluteURL( getSite(), self.request )
        self.request.response.redirect( site_url )


